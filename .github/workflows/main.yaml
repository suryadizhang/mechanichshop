name: Flask API CI/CD

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_mechanic_shop
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          # Install PostgreSQL client tools
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          python -m pip install --upgrade pip wheel setuptools
          # Try normal installation first
          pip install -r requirements.txt || {
            echo "Normal installation failed, trying with --force-reinstall"
            pip install --force-reinstall -r requirements.txt
          }
          pip install pytest flake8

      - name: Lint code
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_mechanic_shop" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Run tests
        run: pytest tests/ -v

      - name: Test application
        run: python -c "from app import create_app; app = create_app('testing'); print('✅ App works!')"

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          echo "Commit: ${{ github.sha }}"
